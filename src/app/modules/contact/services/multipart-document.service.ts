import { Injectable } from '@angular/core';
import { from, last, map, mergeMap, Observable, of, take, tap } from 'rxjs';
import { environment } from 'src/environments/environment';
import { AbstractDocument, MultipartDocument } from '../entities/multipart-document.entity';
import { MimeDocumentFactory, MultipartDocumentFactory } from '../factories/multipart-document.factory';
import { Message } from '../interfaces/message';
import { EncodingService } from './encoding.service';
import { FileService } from './file.service';

@Injectable()
export class MultipartDocumentService {
  constructor(
    private encodingService: EncodingService,
    private fileService: FileService
  ) { }

  public multipartDocumentFactory(): MultipartDocumentFactory {
    return new MultipartDocumentFactory(this.encodingService);
  }

  public mimeDocumentFactory(): MimeDocumentFactory {
    return new MimeDocumentFactory(this.encodingService);
  }

  public createMultipartDocument(message: Message, messageId: string): Observable<MultipartDocument> {
    const factory = this.multipartDocumentFactory();

    factory.setContentType('multipart/mixed')
      .useAutoGeneratedBoundary()
      .setProtectedHeaders()
      .addHeader('Subject', message.subject)
      .addHeader('From', `${message.fromName} <${message.fromEmail}>`)
      .addHeader('Reply-To', `${message.fromName} <${message.fromEmail}>`)
      .addHeader('To', environment.contact.to)
      .addHeader('Message-ID', `<${messageId}>`)
      .addPart(this.mimeDocumentFactory()
        .setPlainTextContent(message.message)
        .build()
      );

    const attachments = message.attachments?.filter(attachment => attachment instanceof File);

    if (!attachments || attachments.length === 0) {
      return of(factory.build());
    } else {
      return from(attachments).pipe(
        mergeMap(attachment => this.fileService.readFileContentsAsArrayBuffer(attachment as File).pipe(
          map(buffer => ({ attachment: attachment as File, content: new Uint8Array(buffer) }))
        )),
        tap(({ attachment, content }) => {
          factory.addPart(this.mimeDocumentFactory()
            .attachment()
            .setName(attachment.name)
            .setFilename(attachment.name)
            .setContentType(attachment.type)
            .setBinaryContent(content)
            .build());
        }),
        last(),
        map(() => factory.build())
      );
    }
  }
}
